<?xml version="1.0"?>
<doc>
    <assembly>
        <name>QRCode Esilv</name>
    </assembly>
    <members>
        <member name="T:QRCode_Esilv.App">
            <summary>
            App
            </summary>
        </member>
        <member name="M:QRCode_Esilv.App.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:QRCode_Esilv.App.Main">
            <summary>
            Application Entry Point.
            </summary>
        </member>
        <member name="T:QRCode_Esilv.MainWindow">
            <summary>
            MainWindow
            </summary>
        </member>
        <member name="M:QRCode_Esilv.MainWindow.#ctor">
            <summary>
            Initialise la fenetre WPF
            </summary>
        </member>
        <member name="M:QRCode_Esilv.MainWindow.ChangeImg_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Ouvre l'explorateur de fichiers windows afin de choisir l'image a modifier (affecte valeur a fileSelected)
            </summary>
            <param name="sender">permet a la fonction d'etre appellé par un boutton en xaml</param>
            <param name="e">permet a la fonction d'etre appellé par un boutton en xaml</param>
        </member>
        <member name="M:QRCode_Esilv.MainWindow.Button1_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            1) Cree une classe MyImage et appelle la fonction choisit par l'utilisateur 2)Ecrit l'image obtenue sur le disque dur et ouvre le dossier contenant la nouvelle image
            </summary>
            <param name="sender">permet a la fonction d'etre appellé par un boutton en xaml</param>
            <param name="e">permet a la fonction d'etre appellé par un boutton en xaml</param>
        </member>
        <member name="M:QRCode_Esilv.MainWindow.NumberValidationTextBox(System.Object,System.Windows.Input.TextCompositionEventArgs)">
            <summary>
            Permet a une TextBox xaml de n'accepter que des caracteres numeriques
            </summary>
            <param name="sender">permet a la fonction d'etre appellé par un boutton en xaml</param>
            <param name="e">permet a la fonction d'etre appellé par un boutton en xaml</param>
        </member>
        <member name="M:QRCode_Esilv.MainWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:QRCode_Esilv.Pixel">
            <summary>
            Chaque objet pixel contient 3 bits: 1 pour le rouge, 1 pour le vert, 1 pour le bleu
            </summary>
        </member>
        <member name="T:QRCode_Esilv.MyImage">
            <summary>
            Classe principale permettant la creation d'une nouvelle image ou la modification de l'image selectionné
            </summary>
        </member>
        <member name="M:QRCode_Esilv.MyImage.#ctor(System.String,System.Int32,System.String)">
            <summary>
            Initialisation de la nouvelle image
            </summary>
            <param name="myFile">Chemin d'acces vers l'image selectionné</param>
            <param name="input">Choix de l'utilisateur</param>
            <param name="textInput">Dans certaines modifications d'image, ce parametre permet d'avoir l'angle ou le mot a encoder</param>
        </member>
        <member name="M:QRCode_Esilv.MyImage.convertASCII(System.Int32)">
            <summary>
            Extrait dans le header le type d'image
            </summary>
            <param name="index">Position dans le header de l'image</param>
            <returns>Retourne un string definissant le type d'image</returns>
        </member>
        <member name="M:QRCode_Esilv.MyImage.ExtractInt(System.Int32)">
            <summary>
            Convertit la valeur Little Endian en Int
            </summary>
            <param name="index">Position dans le header</param>
            <returns>Retourne un int donnant la hauteur ou la largeur...</returns>
        </member>
        <member name="M:QRCode_Esilv.MyImage.INT2LE(System.Int32)">
            <summary>
            Convertit un int en little endian sur 4 bits
            </summary>
            <param name="data">int a convertir</param>
            <returns>little endian sur 4 bits</returns>
        </member>
        <member name="M:QRCode_Esilv.MyImage.GetTab">
            <summary>
            Retourne la liste de bit definissant une image
            </summary>
            <returns>la liste de bit definissant une image</returns>
        </member>
        <member name="M:QRCode_Esilv.MyImage.BlackAndWhite(QRCode_Esilv.Pixel[0:,0:])">
            <summary>
            Modifie le rgb de chaque pixel de facon a obtenir une image en noir et blanc
            </summary>
            <param name="matrix">matrice de pixel</param>
            <returns>matrice de pixel en noir et blanc</returns>
        </member>
        <member name="M:QRCode_Esilv.MyImage.Mirror(QRCode_Esilv.Pixel[0:,0:])">
            <summary>
            Inverse les pixels a droite et a gauche afin d'obtenir un effet miroir
            </summary>
            <param name="matrix">Matrice de pixel</param>
            <returns>matrice de pixel avec effet miroir</returns>
        </member>
        <member name="M:QRCode_Esilv.MyImage.Resize(System.Byte[],System.Int32,System.Int32,System.Int32,QRCode_Esilv.Pixel[0:,0:],System.Int32)">
            <summary>
            Permet d'agrandir ou de retrecir une image selon le facteur entrée. Cree une nouvelle image avec une largeur hauteur et fileSize differente
            </summary>
            <param name="tab">tableau de bit de l'image de base</param>
            <param name="ratio">facteur d'agrandissement/reduction (nombre entier)</param>
            <param name="_height">hauteur de l'image de base</param>
            <param name="_width">largeur de l'image de base</param>
            <param name="matrix">matrice de pixel de l'image de base</param>
            <param name="type">Agrandissement ou Retrecissement</param>
            <returns>la liste de bits decrivant la meme image mais avec une echelle differente</returns>
        </member>
        <member name="M:QRCode_Esilv.MyImage.Rotation(QRCode_Esilv.Pixel[0:,0:],System.Int32,System.Int32,System.Int32,System.Byte[])">
            <summary>
            Effectue une rotation de l'image de base (90,180,ou270) et creer une nouvelle image avec les nouvelles dimensions
            </summary>
            <param name="matrix">matrice de pixel de l'image de base</param>
            <param name="angle">angle de rotation</param>
            <param name="_width">largeur image de base</param>
            <param name="_height">hauteur imgae de base</param>
            <param name="tab">tableau de bit de l'image de base</param>
            <returns>la liste de bits decrivant la meme image mais avec une rotation differente</returns>
        </member>
        <member name="M:QRCode_Esilv.MyImage.Convolution(QRCode_Esilv.Pixel[0:,0:],System.Int32[0:,0:],System.Int32)">
            <summary>
            Applique un effet sur la matrice de pixel de base (detection de bords, flou...)
            </summary>
            <param name="matrix">matrice de pixel de depart</param>
            <param name="convo">la matrice de convolution</param>
            <param name="factor">Pour appliquer certaines matrices, il faut diviser le resultat(flou -> diviser par 9)</param>
            <returns>Nouvelle matrice avec l'effet appliqué</returns>
        </member>
        <member name="M:QRCode_Esilv.MyImage.Fractal(System.Byte[])">
            <summary>
            Creer un Fractal de Mandelbrot sur une nouvelle image
            </summary>
            <param name="tab">tableau de bit de l'image selectionné (permet de copier le header puis de le modifier pour la nouvelle image)</param>
            <returns></returns>
        </member>
        <member name="M:QRCode_Esilv.MyImage.Histogram(QRCode_Esilv.Pixel[0:,0:],System.Byte[])">
            <summary>
            Créer un histogramme de luminosité de l'image selectionné sur une nouvelle image (256 de largeur, basse luminosite a gauche, haute luminosite a droite)
            </summary>
            <param name="matrix">matrice de pixel de l'image selectionné</param>
            <param name="tab">tableau de bit de l'image selectionné</param>
            <returns>Le tableau de bit decrivant l'histogramme sur une nouvelle image</returns>
        </member>
        <member name="M:QRCode_Esilv.MyImage.Steganographie(QRCode_Esilv.Pixel[0:,0:],System.Byte[])">
            <summary>
            Creer une image similaire a celle selectionné mais avec moins d'informations
            </summary>
            <param name="matrix">matrice de pixel de l'image selectionné</param>
            <param name="tab">tableau de bit de l'image selectionné</param>
            <returns>la liste de bits decrivant la meme image mais avec moins d'informations</returns>
        </member>
        <member name="M:QRCode_Esilv.MyImage.Innovation(QRCode_Esilv.Pixel[0:,0:],System.Byte[],System.Int32)">
            <summary>
            Creer un cadre decoratif autour de l'image
            </summary>
            <param name="matrix">La matrice de pixel de l'image choisit</param>
            <param name="tab">Le tableau de bytes de l'image choisit</param>
            <param name="borderSize">La largeur du bord choisit par l'utilisateur</param>
            <returns></returns>
        </member>
        <member name="M:QRCode_Esilv.MyImage.CreateQRCode(QRCode_Esilv.Pixel[0:,0:],System.Byte[],System.String)">
            <summary>
            Creer un QR Code ayant pour information le texte entré par l'utilisateur
            </summary>
            <param name="matrix">matrice de pixel de l'image selectionné</param>
            <param name="tab">tableau de bit de l'image selectionné</param>
            <param name="motString">Mot a encoder</param>
            <returns>Un tabeau de bits de la nouvelle image cree (representant le QR Code)</returns>
        </member>
        <member name="M:QRCode_Esilv.MyImage.CreateMatrix(QRCode_Esilv.Pixel[0:,0:])">
            <summary>
            Convertit un tableau de bit en matrice de pixel
            </summary>
            <param name="matrix">La matrice (initialisé avec des valeurs nul) a remplir avec les valeurs contenues dans le tableau de bits</param>
            <returns></returns>
        </member>
        <member name="M:QRCode_Esilv.MyImage.CreateVect(QRCode_Esilv.Pixel[0:,0:])">
            <summary>
            Convertit une matrice de Pixel en tableau de bits
            </summary>
            <param name="matrix">La matrice a convertir</param>
            <returns>Un tableau de bits decrivant la matrice</returns>
        </member>
        <member name="T:QRCode_Esilv.Properties.Resources">
            <summary>
              Une classe de ressource fortement typée destinée, entre autres, à la consultation des chaînes localisées.
            </summary>
        </member>
        <member name="P:QRCode_Esilv.Properties.Resources.ResourceManager">
            <summary>
              Retourne l'instance ResourceManager mise en cache utilisée par cette classe.
            </summary>
        </member>
        <member name="P:QRCode_Esilv.Properties.Resources.Culture">
            <summary>
              Remplace la propriété CurrentUICulture du thread actuel pour toutes
              les recherches de ressources à l'aide de cette classe de ressource fortement typée.
            </summary>
        </member>
        <member name="T:ReedSolomon.GenericGF">
            <summary>
              <p>This class contains utility methods for performing mathematical operations over
            the Galois Fields. Operations use a given primitive polynomial in calculations.</p>
              <p>Throughout this package, elements of the GF are represented as an {@code int}
            for convenience and speed (but at the cost of memory).
              </p>
            </summary>
            <author>Sean Owen</author>
        </member>
        <member name="M:ReedSolomon.GenericGF.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a representation of GF(size) using the given primitive polynomial.
            </summary>
            <param name="primitive">irreducible polynomial whose coefficients are represented by
            *  the bits of an int, where the least-significant bit represents the constant
            *  coefficient</param>
            <param name="size">the size of the field</param>
            <param name="genBase">the factor b in the generator polynomial can be 0- or 1-based
            *  (g(x) = (x+a^b)(x+a^(b+1))...(x+a^(b+2t-1))).
            *  In most cases it should be 1, but for QR code it is 0.</param>
        </member>
        <member name="M:ReedSolomon.GenericGF.BuildMonomial(System.Int32,System.Int32)">
            <summary>
            Builds the monomial.
            </summary>
            <param name="degree">The degree.</param>
            <param name="coefficient">The coefficient.</param>
            <returns>the monomial representing coefficient * x^degree</returns>
        </member>
        <member name="M:ReedSolomon.GenericGF.AddOrSubtract(System.Int32,System.Int32)">
            <summary>
            Implements both addition and subtraction -- they are the same in GF(size).
            </summary>
            <returns>sum/difference of a and b</returns>
        </member>
        <member name="M:ReedSolomon.GenericGF.Exp(System.Int32)">
            <summary>
            Exps the specified a.
            </summary>
            <returns>2 to the power of a in GF(size)</returns>
        </member>
        <member name="M:ReedSolomon.GenericGF.Log(System.Int32)">
            <summary>
            Logs the specified a.
            </summary>
            <param name="a">A.</param>
            <returns>base 2 log of a in GF(size)</returns>
        </member>
        <member name="M:ReedSolomon.GenericGF.Inverse(System.Int32)">
            <summary>
            Inverses the specified a.
            </summary>
            <returns>multiplicative inverse of a</returns>
        </member>
        <member name="M:ReedSolomon.GenericGF.Multiply(System.Int32,System.Int32)">
            <summary>
            Multiplies the specified a with b.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns>product of a and b in GF(size)</returns>
        </member>
        <member name="P:ReedSolomon.GenericGF.Size">
            <summary>
            Gets the size.
            </summary>
        </member>
        <member name="P:ReedSolomon.GenericGF.GeneratorBase">
            <summary>
            Gets the generator base.
            </summary>
        </member>
        <member name="M:ReedSolomon.GenericGF.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:ReedSolomon.GenericGFPoly">
            <summary>
            <p>Represents a polynomial whose coefficients are elements of a GF.
            Instances of this class are immutable.</p>
            <p>Much credit is due to William Rucklidge since portions of this code are an indirect
            port of his C++ Reed-Solomon implementation.</p>
            </summary>
            <author>Sean Owen</author>
        </member>
        <member name="M:ReedSolomon.GenericGFPoly.#ctor(ReedSolomon.GenericGF,System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:ReedSolomon.GenericGFPoly"/> class.
            </summary>
            <param name="field">the {@link GenericGF} instance representing the field to use
            to perform computations</param>
            <param name="coefficients">coefficients as ints representing elements of GF(size), arranged
            from most significant (highest-power term) coefficient to least significant</param>
            <exception cref="T:System.ArgumentException">if argument is null or empty,
            or if leading coefficient is 0 and this is not a
            constant polynomial (that is, it is not the monomial "0")</exception>
        </member>
        <member name="P:ReedSolomon.GenericGFPoly.Degree">
            <summary>
            degree of this polynomial
            </summary>
        </member>
        <member name="P:ReedSolomon.GenericGFPoly.IsZero">
            <summary>
            Gets a value indicating whether this <see cref="T:ReedSolomon.GenericGFPoly"/> is zero.
            </summary>
            <value>true iff this polynomial is the monomial "0"</value>
        </member>
        <member name="M:ReedSolomon.GenericGFPoly.GetCoefficient(System.Int32)">
            <summary>
            coefficient of x^degree term in this polynomial
            </summary>
            <param name="degree">The degree.</param>
            <returns>coefficient of x^degree term in this polynomial</returns>
        </member>
        <member name="M:ReedSolomon.GenericGFPoly.EvaluateAt(System.Int32)">
            <summary>
            evaluation of this polynomial at a given point
            </summary>
            <param name="a">A.</param>
            <returns>evaluation of this polynomial at a given point</returns>
        </member>
        <member name="M:ReedSolomon.ReedSolomonAlgorithm.Encode(System.Byte[],System.Int32,ReedSolomon.ErrorCorrectionCodeType)">
            <summary>
            Produces error correction codewords for a message using the Reed-Solomon algorithm.
            </summary>
            <param name="message">The message to compute the error correction codewords.</param>
            <param name="eccCount">The number of error correction codewords desired.</param>
            <param name="eccType">The type of Galois field to use to encode error correction codewords.</param>
            <returns>Returns the computed error correction codewords.</returns>
        </member>
        <member name="M:ReedSolomon.ReedSolomonAlgorithm.Encode(System.Byte[],System.Int32)">
            <summary>
            Produces error correction codewords for a message using the Reed-Solomon algorithm.
            </summary>
            <param name="message">The message to compute the error correction codewords.</param>
            <param name="eccCount">The number of error correction codewords desired.</param>
            <returns>Returns the computed error correction codewords.</returns>
        </member>
        <member name="M:ReedSolomon.ReedSolomonAlgorithm.Decode(System.Byte[],System.Byte[],ReedSolomon.ErrorCorrectionCodeType)">
            <summary>
            Repairs a possibly broken message using the Reed-Solomon algorithm.
            </summary>
            <param name="message">The possibly broken message to repair.</param>
            <param name="ecc">The available error correction codewords.</param>
            <param name="eccType">The type of Galois field to use to decode message.</param>
            <returns>Returns the repaired message, or null if it cannot be repaired.</returns>
        </member>
        <member name="M:ReedSolomon.ReedSolomonAlgorithm.Decode(System.Byte[],System.Byte[])">
            <summary>
            Repairs a possibly broken message using the Reed-Solomon algorithm.
            </summary>
            <param name="message">The possibly broken message to repair.</param>
            <param name="ecc">The available error correction codewords.</param>
            <returns>Returns the repaired message, or null if it cannot be repaired.</returns>
        </member>
        <member name="T:ReedSolomon.ReedSolomonDecoder">
            <summary> <p>Implements Reed-Solomon decoding, as the name implies.</p>
            
            <p>The algorithm will not be explained here, but the following references were helpful
            in creating this implementation:</p>
            
            <ul>
            <li>Bruce Maggs.
            <a href="http://www.cs.cmu.edu/afs/cs.cmu.edu/project/pscico-guyb/realworld/www/rs_decode.ps">
            "Decoding Reed-Solomon Codes"</a> (see discussion of Forney's Formula)</li>
            <li>J.I. Hall. <a href="www.mth.msu.edu/~jhall/classes/codenotes/GRS.pdf">
            "Chapter 5. Generalized Reed-Solomon Codes"</a>
            (see discussion of Euclidean algorithm)</li>
            </ul>
            
            <p>Much credit is due to William Rucklidge since portions of this code are an indirect
            port of his C++ Reed-Solomon implementation.</p>
            
            </summary>
            <author>Sean Owen</author>
            <author>William Rucklidge</author>
            <author>sanfordsquires</author>
        </member>
        <member name="M:ReedSolomon.ReedSolomonDecoder.Decode(System.Int32[],System.Int32)">
            <summary>
              <p>Decodes given set of received codewords, which include both data and error-correction
            codewords. Really, this means it uses Reed-Solomon to detect and correct errors, in-place,
            in the input.</p>
            </summary>
            <param name="received">data and error-correction codewords</param>
            <param name="twoS">number of error-correction codewords available</param>
            <returns>false: decoding fails</returns>
        </member>
        <member name="T:ReedSolomon.ReedSolomonEncoder">
            <summary>
            Implements Reed-Solomon encoding, as the name implies.
            </summary>
            <author>Sean Owen</author>
            <author>William Rucklidge</author>
        </member>
    </members>
</doc>
